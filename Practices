# This program prints How are you?
# You can use two statements to print to sentences
print("How are you?")
print("are you ok ?")

# Testing weather 2 is greater than 1
print(2>1)

"""
I'm trying to use multi-line comments using three double-quotes.

I use these lines for your reference only.

These are common in class, functions, or modules.
"""

# Now I'm showing multiple single-line comments
# Multiplying 2 with 3 # And printing the result
print(2*3)

# STRINGS
# string variable
print("Hello World!")
my_text = "Hello World!"
print(my_text)

# You can use single or double quotations
print("This is Sam's book.")
# print('This is Sam's book.')
print('This is Sam\'s book.')

# NUMBERS (no quotations)
# without variable
print(1) # Prints 1
print(5.7) # Prints 5.7
print(-6.789) # Prints -6.789

# using variables
my_int=125
print(my_int) # Prints 125

my_float=25.763
print(my_float) # Prints 25.763

# Difference between numbers and the strings
print("1"+"2") # Prints 12
print(1+2) # Prints 3

# VARIABLES
print("*** This program shows the use of a variable. ***") # Prints *** This program shows the use of a variable. ***

# my_text is holding the value "Hello World!"
my_text="Hello World!" # prints Hello World!
print(my_text)

# my_text is holding a new value
my_text="Dear Reader, how are you?"
print(my_text) # prints Dear Reader, how are you?

# Analysis
number1=2
number2=3
print(number1+number2) # prints 5
number1=2.0
print(number1+number2) # prints 5.0

# Data type
number1=2
print(type(number1)) # prints <class 'int'>
number1=2.0
print(type(number1)) # prints <class 'float'>

# Naming conventions
# variable name cannot clash with python keywords
# for=25
# print(for) OUTPUT:SyntaxError
# the correct way to write variable name
for_variable=25
print(for_variable) # prints 25

# variable name cannot clash with python in-build functions
print( abs(23.7)) # prints 23.7
print( abs(-5.7))  # prints 5.7
print( abs(3-7.5))  # prints 4.5

# variable name can be alphanumerical if the first letter starts with a letter
student_1="John"
print(student_1) # prints John
student_2="Sam" 
print(student_2) # prints Sam
# 3student="Kate"
# print(student_3) OUTPUT:SyntaxError
# student@name="Jack"
# print (student@name) OUTPUT:SyntaxError

# assigning multiple variables in a single line
x,y,z=10,25,-303.5
print(x) # prints 10
print(y) # prints 25
print(y) # prints 303.5
print(z)

# SUM
print("The sum of 12 and 5.7 are as follows:") 
print(12+5.7) 
# prints The sum of 12 and 5.7 are as follows:
17.7

# BOOLEAN
# using the bool() function
import random
male = False
male = bool((0, 1))
if (male):
print ("We will use name Adam")
else:
print ("We will use name Sara") # prints We will use name Adam


# CASTING IN PYTHON
# variable set to integer
my_score = 201
print("The type of my score is", type(my_score),"\n")
print("my score is", my_score, "\n")
print("Casting to a string...\n")
# variable cast to string
my_score = str(my_score)
print("The type of my score is now", type(my_score),"\n")
print("my score is", my_score,"\n")
# prints The type of my score is <class 'int'> 
my score is 201 
Casting to a string...
The type of my score is now <class 'str'> 
my score is 201 

# STRING INPUT
# getting string input from user
print("Welcome to your first data entry program\n")
user_name = input("Please enter your name...\n")
user_yob = int(input("Please enter your year of birth...\n"))
print("Thank you for your input\n")
print("The name you entered is ", user_name)
print("Your age in years is ", 2016 - user_yob)
# prints Please enter your name...
Shanghai
Please enter your year of birth...
1989
Thank you for your input
The name you entered is Shanghai
Your age in years is 27

# OBJECT ORIENTED PROGRAMMING
# classes and objects
# creating a class called `Person` with attributes `name` and `age`. Create an instance of this class and print out the person's details.
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
person1=Person("Alice", 30)
print(f"{person1.name} is {person1.age} years old") # prints Alice is 30 years old
# encapsulation
# create a class `BankAccount` with private attributes `balance` and `account_number`, and methods `deposit` and `withdraw` to manipulate the balance.class BankAccount:
class BankAccount:
    def __init__(self, account_number):
        self.__account_number = account_number
        self.__balance = 0
    def deposit(self, amount):
        self.__balance += amount
    def withdraw(self, amount):
        if self.__balance >= amount:
            self.__balance -= amount
        else:
            print("Insufficient funds")
    def get_balance(self):
        return self.__balance
account = BankAccount("12345")
account.deposit(1000)
account.withdraw(500)
print("Balance:", account.get_balance()) # prints Balance: 500
# inheritance
# create a base class `Vehicle` with a method `get_info()` and a derived class `Car` that inherits from `Vehicle` and adds a method `start_engine()`.
class Vehicle:
    def __init__(self, make, model):
        self.make = make
        self.model = model
    def get_info(self):
        return f"{self.make} {self.model}"
class Car(Vehicle):
    def start_engine(self):
        return "Engine started"
car = Car("Toyota", "Corolla")
print(car.get_info())
print(car.start_engine()) # prints Toyota Corolla
Engine started

# polymorphism
# Create a base class `Shape` with a method `area()` and two derived classes `Circle` and `Rectangle`. Implement the `area()` method in each subclass.
import math
class Shape:
    def area(self):
        pass
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return math.pi * self.radius ** 2
class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height
def area(self):
    return self.width * self.height
circle = Circle(5)
rectangle = Rectangle(4, 6)
print("Circle area:", circle.area())
print("Rectangle area:", rectangle.area()) # prints Circle area: 78.53981633974483
Rectangle area: None
# oop in python and modularity - reinforcing object oriented programming concepts
# book.py
class Book:
    def __init__(self, title, author, is_borrowed=False):
        self.title = title
        self.author = author
        self.is_borrowed = is_borrowed
    def borrow(self):
        if not self.is_borrowed:
            self.is_borrowed = True
            return True
        else:
            return False
    def return_book(self):
        if self.is_borrowed:
            self.is_borrowed = False
            return True
        else:
            return False
# library.py
from book import Book
class Library:
    def __init__(self):
        self.books = []
        self.borrowed_count = 0
    def add_book(self,book):
        self.books.append(book)
    def borrow_book(self,title):
        for book in self.books:
            if book.title == title:
                if book.borrow():
                    self.borrowed_count += 1
                    return f"Successfully borrowed: {title}"
                else:
                    return f"{title} is already borrowed."
            return f"{title} not found in library."
    def return_book(self, title):
        for book in self.books:
            if book.title == title:
                if book.return_book():
                    self.borrowed_count -= 1
                    return f"Sucessfully returned: {title}"
                else:
                    return f"{title} is not currently borrowed."
            return f"{title} not found in the library."
# main.py
from book import Book
from library import Library
# create some book objects
book1 = Book("Python Programming", "John Smith")
book2 = Book("Data Science Essentials", "Alice Johnson")
book3 = Book("Web Development Basics", "Bob Wilson")
# create a library
library = Library()
# add books to the library
library.add_book(book1)
library.add_book(book2)
library.add_book(book3)
# borrow and return books
print(library.borrow_book("Python Programming")) # borrow book1
print(library.borrow_book("Python Programming")) # already borrowed
print(library.return_book("Python Programming")) # return book1
print(library.return_book("Python Programming")) # not currently borrowed
# count how many books are currently borrowed
print(f"Number of borrowed books: {library.borrowed_count}")
# prints 
Successfully borrowed: Python Programming
Python Programming is already borrowed.
Sucessfully returned: Python Programming
Python Programming is not currently borrowed.
Number of borrowed books: 0
