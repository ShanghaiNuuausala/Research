class Ticket:
    def __init__(self, ticketNumber, staffID, name, email, description):
        self.ticketNumber = ticketNumber
        self.staffID = staffID
        self.name = name
        self.email = email
        self.description = description
        self.response = "Not Yet Provided"
        self.status = "Open"
#
class Ticket:
    ticket_counter = 0 

    def __init__(self, staff_id, creator_name, contact_email, description):
        self.ticket_number = Ticket.ticket_counter + 2000
        self.staff_id = staff_id
        self.creator_name = creator_name
        self.contact_email = contact_email
        self.description = description
        self.status = "Open"
        self.response = "Not Yet Provided"
        Ticket.ticket_counter += 1
#
class Ticket:
    ticket_counter = 0 
    all_tickets = []

    def __init__(self, staff_id, creator_name, contact_email, description):
        self.ticket_number = Ticket.ticket_counter + 2000
        self.staff_id = staff_id
        self.creator_name = creator_name
        self.contact_email = contact_email
        self.description = description
        self.status = "Open"
        self.response = "Not Yet Provided"
        Ticket.ticket_counter += 1
        Ticket.all_tickets.append(self)

# responding to a ticket
def respond_to_ticket():
    ticket_number = int(input("Enter Ticket Number: "))
    response = input("Enter Feedback Response: ")

    for ticket in Ticket.all_tickets:
        if ticket.ticket_number == ticket_number:
            ticket.respond(response)
            print("Ticket responded successfully!")
            return
    print("Ticket not found.")
#
def respond(self, response):
        self.response = response
        if "Password Change" in self.description:
            self.generate_password
#
def respond(self, response):
        self.response = response
def resolve_password_change(self):
        if "Password Change" in self.description:
            self.response = f"Password changed to: {self.staff_id[:2]}{self.creator_name[:3]}"
            self.status = "Closed"
#
def respond(self, response):
        self.response = response
        if "Password Change" in self.description:
            self.generate_password()
def generate_password(self):
        if "Password Change" in self.description:
            self.response = f"Password changed to: {self.staff_id[:2]}{self.creator_name[:3]}"
            self.status = "Closed"
# 
def respond_to_ticket(self, ticket_number, response):
        for ticket in self.tickets:
            if ticket.ticket_number == ticket_number:
                ticket.respond(response)
                self.closed_tickets += 1
                self.open_tickets -= 1
                self.resolved_tickets += 1
                return True
        return False

# submitting a ticket
def submit_ticket(self, staff_id, creator_name, contact_email, description):
        ticket = Ticket(staff_id, creator_name, contact_email, description)
        self.tickets.append(ticket)
        self.open_tickets += 1
#
def submit_ticket():
    staff_id = input("Enter Staff ID: ")
    creator_name = input("Enter Ticket Creator Name: ")
    contact_email = input("Enter Email Address: ")
    description = input("Enter Description of the Issue: ")
#
def submitTicket(self, staffID, name, email, description):
        newTicket = Ticket(HelpDesk.ticketNumber, staffID, name, email, description)
        self.tickets.append(newTicket)
        HelpDesk.ticketNumber += 1
          # HelpDesk.ticketNumber  = HelpDesk.ticketNumber + 1
        HelpDesk.openTickets += 1
        if "Password Change" in description:
            newTicket.response = f"New Password: {staffID[:2]}{name[:3]}"
            HelpDesk.closedTickets += 1
            HelpDesk.openTickets -= 1
            newTicket.status = "Closed"
        return newTicket
#  
def submit_ticket(self, staff_id, creator_name, contact_email, description):
        ticket = Ticket(staff_id, creator_name, contact_email, description)
        self.tickets.append(ticket)
        print("Ticket submitted successfully!")

# displaying ticket info
def display_info(self):
        print("Ticket Number:", self.ticket_number)
        print("Staff ID:", self.staff_id)
        print("Ticket Creator Name:", self.creator_name)
        print("Email Address:", self.contact_email)
        print("Description of the Issue:", self.description)
        print("Response from IT Department:", self.response)
        print("Ticket Status:", self.status)
#
def display_info(self):
        print("Ticket Number:", self.ticket_number)
        print("Staff ID:", self.staff_id)
        print("Ticket Creator Name:", self.creator_name)
        print("Contact Email:", self.contact_email)
        print("Description of the Issue:", self.description)
        print("Ticket Status:", self.status)
        if self.response:
            print("Response:", self.response)
#
# display ticket information and statistics after resolving
    print("\nTicket Information (After Resolving):")
    for ticket in Ticket.all_tickets:
        ticket.display_info()
#
def displayTicket(self, ticketNumber):
        for ticket in HelpDesk.tickets:
            if ticket.ticketNumber == ticketNumber:
                print(ticket)

# reopening a ticket
def reopen_ticket():
    ticket_number = int(input("Enter Ticket Number to reopen: "))

    for ticket in Ticket.all_tickets:
        if ticket.ticket_number == ticket_number:
            ticket.reopen()
            print("Ticket reopened successfully!")
            return

    print("Ticket not found or cannot be reopened.")
#
def reopen(self):
        self.status = "Reopened"
#
def reopen(self):
        if self.status == "Closed":
            self.status = "Reopened"
#
def reopen_ticket(self, ticket_number):
    for ticket in self.tickets:
        if ticket.ticket_number == ticket_number:
            if ticket.status == "Closed":
                ticket.reopen()
                self.open_tickets += 1
                self.closed_tickets -= 1
                self.resolved_tickets -= 1
                return True
            else:
                print("Ticket is not closed and cannot be reopened.")
                return False
    return False
#
def reopen(self):
    if self.status == "Closed":
        self.status = "Reopened"

# generating a new password
def generate_password(self):
        if "Password Change" in self.description:
            password = f"{self.staff_id[:2]}{self.creator_name[:3]}"
            self.response = f"Password changed to: {password}"
#
def generate_password(self):
        if "Password Change" in self.description:
            self.response = f"Password changed to: {self.staff_id[:2]}{self.creator_name[:3]}"
            self.status = "Closed"

# creating instances of submitting a ticket
ticket1 = Ticket("12345", "John Doe", "john@example.com", "Issue with Email")
ticket2 = Ticket("54321", "Alice Smith", "alice@example.com", "Password Change request")
#
ticket1 = helpDesk.submitTicket("123456", "John Smith", "johnsmith@hotmail.com", "Password Change")
ticket2 = helpDesk.submitTicket("654321", "Jane Doe", "janedoe@gmail.com", "Network Connection Issue")
ticket3 = helpDesk.submitTicket("789012", "Bob Johnson", "bjohnson@yahoo.com", "Application Error")
print()

# user input
if __name__ == "__main__":
    while True:
        print("\nHelp Desk Ticketing System")
        print("1. Submit Ticket")
        print("2. Respond to Ticket")
        print("3. Reopen Ticket")
        print("4. Display Ticket Information")
        print("5. Display Ticket Statistics")
        print("6. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            submit_ticket()
        elif choice == "2":
            respond_to_ticket()
        elif choice == "3":
            reopen_ticket()
        elif choice == "4":
            ticket_number = int(input("Enter Ticket Number to display: "))
            for ticket in Ticket.all_tickets:
                if ticket.ticket_number == ticket_number:
                    ticket.display_info()
                    break
            else:
                print("Ticket not found.")
        elif choice == "5":
            display_statistics()
        elif choice == "6":
            print("Exiting the Ticketing System. Goodbye!")
            break
        else:
            print("Invalid choice. Please select a valid option.")
#
if choice == "1":
            staff_id = input("Enter Staff ID: ")
            creator_name = input("Enter Ticket Creator Name: ")
            contact_email = input("Enter Email Address: ")
            description = input("Enter Description of the Issue: ")
            system.submit_ticket(staff_id, creator_name, contact_email, description)
        elif choice == "2":
            ticket_number = int(input("Enter Ticket Number: "))
            response = input("Enter Feedback Response: ")
            system.respond_to_ticket(ticket_number, response)
        elif choice == "3":
            ticket_number = int(input("Enter Ticket Number to reopen: "))
            system.reopen_ticket(ticket_number)
        elif choice == "4":
            ticket_number = int(input("Enter Ticket Number to display: "))
            system.display_ticket_info(ticket_number)
        elif choice == "5":
            system.display_statistics()
        elif choice == "6":
            print("Exiting the Ticketing System. Goodbye!")
            break
        else:
            print("Invalid choice. Please select a valid option.")

